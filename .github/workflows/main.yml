name: Build & Release Workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
      - name: Set lowercase repo info
        id: vars
        run: |
          echo "repo_lower=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Harden Runner
        uses: step-security/harden-runner@v2.10.0
        with:
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            archive.ubuntu.com:80
            auth.docker.io:443
            azure.archive.ubuntu.com:80
            dc.services.visualstudio.com:443
            esm.ubuntu.com:443
            ghcr.io:443
            github.com:443
            objects.githubusercontent.com:443
            packages.microsoft.com:443
            production.cloudflare.docker.com:443
            proxy.golang.org:443
            registry-1.docker.io:443
            security.ubuntu.com:80
            storage.googleapis.com:443

      - name: Checkout certsquirt
        uses: actions/checkout@v4
        with:
          path: certsquirt

      - name: Read version from file
        id: version
        run: echo "VERSION=$(cat certsquirt/VERSION)" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Build CertSquirt with version info
        run: |
          cd certsquirt
          go build -v -x -a -ldflags "-X main.buildstamp=$(date -u '+%Y-%m-%d_%I:%M:%S%p') -X main.githash=$(git rev-parse HEAD)" -o certsquirt

      - name: Upload CertSquirt binary to release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          generate_release_notes: true
          files: certsquirt/certsquirt

      - name: Install aws-sdk-cpp
        id: vcpkg
        uses: johnwason/vcpkg-action@v6
        with:
          pkgs: aws-sdk-cpp[kms] aws-sdk-cpp[acm-pca]
          triplet: x64-linux-dynamic
          token: ${{ github.token }}

      - name: Checkout aws-kms-pkcs11
        uses: actions/checkout@v4
        with:
          repository: "JackOfMostTrades/aws-kms-pkcs11"
          path: aws-kms-pkcs11

      - name: Install build dependencies
        uses: ConorMacBride/install-package@v1
        with:
          apt: build-essential libjson-c-dev libp11-kit-dev libcurl4 libcurl4-openssl-dev

      - name: Build aws-kms-pkcs11
        run: cd aws-kms-pkcs11 && AWS_SDK_PATH=${{ github.workspace }}/vcpkg/installed/x64-linux-dynamic make

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.repo_lower }}

      - name: Build and push Docker image (${{ matrix.platform }})
        uses: docker/build-push-action@v5
        with:
          context: ./certsquirt
          platforms: ${{ matrix.platform }}
          push: true
          file: certsquirt/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:latest
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}

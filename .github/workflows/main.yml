name: Build & Release Workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
      - name: Set lowercase repo info and sanitized platform tag
        id: vars
        run: |
          repo="${{ github.repository }}"
          platform="${{ matrix.platform }}"
          echo "repo_lower=$(echo "$repo" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PLATFORM_TAG=$(echo "$platform" | sed 's|/|-|')" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-7)" >> $GITHUB_ENV

#      - name: Harden Runner
#        uses: step-security/harden-runner@v2.10.2
#        with:
#          egress-policy: audit

      - name: Harden Runner
        uses: step-security/harden-runner@446798f8213ac2e75931c1b0769676d927801858 # v2.10.0
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            archive.ubuntu.com:80
            auth.docker.io:443
            azure.archive.ubuntu.com:80
            dc.services.visualstudio.com:443
            esm.ubuntu.com:443
            ghcr.io:443
            github.com:443
            objects.githubusercontent.com:443
            packages.microsoft.com:443
            production.cloudflare.docker.com:443
            proxy.golang.org:443
            registry-1.docker.io:443
            motd.ubuntu.com:80
            security.ubuntu.com:80
            ports.ubuntu.com:80
            storage.googleapis.com:443
            uploads.github.com:443

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Checkout certsquirt
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: certsquirt

      - name: Read version from file
        id: get_version
        run: echo "VERSION=$(cat certsquirt/VERSION)" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Build CertSquirt with version info
        run: |
          cd certsquirt
          go build -v -ldflags "-X main.buildstamp=$(date -u '+%Y-%m-%d_%I:%M:%S%p') -X main.githash=$(git rev-parse HEAD)" -o ../certsquirt-${{ env.PLATFORM_TAG }}

      - name: Install aws-sdk-cpp
        id: vcpkg
        uses: johnwason/vcpkg-action@v6
        with:
          pkgs: aws-sdk-cpp[kms] aws-sdk-cpp[acm-pca]
          triplet: x64-linux-dynamic
          token: ${{ github.token }}

      - name: Checkout aws-kms-pkcs11
        uses: actions/checkout@v4
        with:
          repository: "JackOfMostTrades/aws-kms-pkcs11"
          path: aws-kms-pkcs11

      - name: Install build dependencies
        uses: ConorMacBride/install-package@v1
        with:
          apt: build-essential libjson-c-dev libp11-kit-dev libcurl4 libcurl4-openssl-dev

      - name: Build aws-kms-pkcs11
        run: cd aws-kms-pkcs11 && AWS_SDK_PATH=${{ github.workspace }}/vcpkg/installed/x64-linux-dynamic make

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.repo_lower }}

      - name: Build and push Docker image (${{ matrix.platform }})
        uses: docker/build-push-action@v5
        with:
          context: ./
          platforms: ${{ matrix.platform }}
          push: true
          file: certsquirt/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:latest
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:${{ env.PLATFORM_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: certsquirt-${{ env.PLATFORM_TAG }}
          path: certsquirt-${{ env.PLATFORM_TAG }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      VERSION: ${{ needs.build.outputs.version }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout full repo for GH CLI
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move artifacts to root
        run: |
          mv ./artifacts/certsquirt-linux-amd64/certsquirt-linux-amd64 ./
          mv ./artifacts/certsquirt-linux-arm64/certsquirt-linux-arm64 ./

      - name: Upload release assets
        run: |
          gh release delete "v${{ env.VERSION }}" --cleanup-tag --yes || echo "No existing release to delete"
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --generate-notes \
            certsquirt-linux-amd64 \
            certsquirt-linux-arm64

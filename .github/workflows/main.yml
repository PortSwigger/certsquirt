name: Build & Release Workflow

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
      fail-fast: false

    steps:
      - name: Set lowercase repo info and sanitized platform tag
        id: vars
        run: |
          repo="${{ github.repository }}"
          platform="${{ matrix.platform }}"
          echo "repo_lower=$(echo "$repo" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PLATFORM_TAG=$(echo "$platform" | sed 's|/|-|')" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-7)" >> $GITHUB_ENV

#      - name: Harden Runner
#        uses: step-security/harden-runner@v2.10.2
#        with:
#          egress-policy: audit

      - name: Harden Runner
        uses: step-security/harden-runner@446798f8213ac2e75931c1b0769676d927801858 # v2.10.0
        with:
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            archive.ubuntu.com:80
            auth.docker.io:443
            azure.archive.ubuntu.com:80
            dc.services.visualstudio.com:443
            esm.ubuntu.com:443
            ghcr.io:443
            github.com:443
            objects.githubusercontent.com:443
            packages.microsoft.com:443
            production.cloudflare.docker.com:443
            proxy.golang.org:443
            registry-1.docker.io:443
            motd.ubuntu.com:80
            security.ubuntu.com:80
            ports.ubuntu.com:80
            storage.googleapis.com:443
            uploads.github.com:443
            fulcio.sigstore.dev:443
            rekor.sigstore.dev:443

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Checkout certsquirt
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: certsquirt

      - name: Read version from file
        id: get_version
        run: echo "VERSION=$(cat certsquirt/VERSION)" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Set architecture variables
        id: arch-vars
        run: |
          case "${{ matrix.platform }}" in
            "linux/amd64")
              echo "GOOS=linux" >> $GITHUB_ENV
              echo "GOARCH=amd64" >> $GITHUB_ENV
              echo "VCPKG_TRIPLET=x64-linux-dynamic" >> $GITHUB_ENV
              echo "CC=gcc" >> $GITHUB_ENV
              echo "CXX=g++" >> $GITHUB_ENV
              ;;
            "linux/arm64")  
              echo "GOOS=linux" >> $GITHUB_ENV
              echo "GOARCH=arm64" >> $GITHUB_ENV
              echo "VCPKG_TRIPLET=arm64-linux-dynamic" >> $GITHUB_ENV
              echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV
              ;;
          esac

      - name: Install cross-compilation tools for ARM64
        if: matrix.platform == 'linux/arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
      - name: Install aws-sdk-cpp
        id: vcpkg
        uses: johnwason/vcpkg-action@v6
        with:
          pkgs: aws-sdk-cpp[kms] aws-sdk-cpp[acm-pca]
          triplet: ${{ env.VCPKG_TRIPLET }}
          token: ${{ github.token }}

      - name: Build CertSquirt with version info
        run: |
          cd certsquirt
          echo "Building for GOOS=$GOOS GOARCH=$GOARCH with CC=$CC CXX=$CXX"
          CGO_ENABLED=1 go build -v -ldflags "-X main.buildstamp=$(date -u '+%Y-%m-%d_%I:%M:%S%p') -X main.githash=$(git rev-parse HEAD)" -o ../certsquirt-${{ env.PLATFORM_TAG }}
          cp ../certsquirt-${{ env.PLATFORM_TAG }} ./certsquirt

      - name: Checkout aws-kms-pkcs11
        uses: actions/checkout@v4
        with:
          repository: "JackOfMostTrades/aws-kms-pkcs11"
          path: aws-kms-pkcs11
          fetch-depth: 1

      - name: Get aws-kms-pkcs11 commit hash
        id: aws-kms-commit
        run: |
          cd aws-kms-pkcs11
          echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Cache aws-kms-pkcs11 build
        id: cache-aws-kms
        uses: actions/cache@v4
        with:
          path: aws-kms-pkcs11/aws_kms_pkcs11.so
          key: ${{ runner.os }}-${{ matrix.platform }}-aws-kms-pkcs11-${{ steps.aws-kms-commit.outputs.hash }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-aws-kms-pkcs11-${{ steps.aws-kms-commit.outputs.hash }}-
            ${{ runner.os }}-${{ matrix.platform }}-aws-kms-pkcs11-

      - name: Install build dependencies
        if: steps.cache-aws-kms.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
            # Enable cross-architecture packages
            sudo dpkg --add-architecture arm64
            # Restrict existing repositories to amd64 only
            sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
            sudo sed -i 's/^deb-src /deb-src [arch=amd64] /' /etc/apt/sources.list
            # Add ARM64 repository for packages
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main universe" | sudo tee /etc/apt/sources.list.d/arm64.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security main universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
            sudo apt-get update
            sudo apt-get install -y build-essential libjson-c-dev:arm64 libp11-kit-dev:arm64 libcurl4-openssl-dev:arm64 libssl-dev:arm64 zlib1g-dev:arm64
          else
            sudo apt-get install -y build-essential libjson-c-dev libp11-kit-dev libcurl4-openssl-dev
          fi

      - name: Set vcpkg architecture path
        run: |
          case "${{ matrix.platform }}" in
            "linux/amd64")
              echo "VCPKG_INSTALLED_PATH=${{ github.workspace }}/vcpkg/installed/x64-linux-dynamic" >> $GITHUB_ENV
              ;;
            "linux/arm64")  
              echo "VCPKG_INSTALLED_PATH=${{ github.workspace }}/vcpkg/installed/arm64-linux-dynamic" >> $GITHUB_ENV
              ;;
          esac

      - name: Build aws-kms-pkcs11
        if: steps.cache-aws-kms.outputs.cache-hit != 'true'
        run: |
          cd aws-kms-pkcs11
          if [ "${{ matrix.platform }}" = "linux/arm64" ]; then
            # Debug: Check the architecture of vcpkg libraries and toolchain
            echo "Checking vcpkg library architectures:"
            file ${{ env.VCPKG_INSTALLED_PATH }}/lib/libaws-cpp-sdk-core.so || echo "File not found"
            echo "Checking compiler and linker:"
            which ${{ env.CC }} && ${{ env.CC }} --version
            which ${{ env.CXX }} && ${{ env.CXX }} --version
            echo "Testing simple compilation:"
            echo 'int main(){return 0;}' > test.c
            ${{ env.CC }} -c test.c -o test.o
            file test.o
            rm -f test.c test.o
            # For ARM64 cross-compilation, specify all required library paths with correct -I flags
            # pkcs11.h is in /usr/include/p11-kit-1/p11-kit/pkcs11.h
            # Add proper library path and cross-compilation flags
            export PKG_CONFIG_PATH="${{ env.VCPKG_INSTALLED_PATH }}/lib/pkgconfig:$PKG_CONFIG_PATH"
            export PKG_CONFIG_SYSROOT_DIR="/"
            # Fix the hardcoded g++ in Makefile by replacing it with our cross-compiler
            sed -i 's/g++ -shared/$(CXX) -shared/' Makefile
            sed -i '1i CXX ?= g++' Makefile
            AWS_SDK_PATH="${{ env.VCPKG_INSTALLED_PATH }}" make CC="${{ env.CC }}" CXX="${{ env.CXX }}" \
              PKCS11_INC="-I/usr/include/p11-kit-1/p11-kit" \
              PKCS11_MOD_PATH="/usr/lib/aarch64-linux-gnu/pkcs11" \
              JSON_C_INC="-I/usr/include/json-c" \
              LDFLAGS="-L${{ env.VCPKG_INSTALLED_PATH }}/lib -L/usr/lib/aarch64-linux-gnu"
          else
            AWS_SDK_PATH="${{ env.VCPKG_INSTALLED_PATH }}" make CC="${{ env.CC }}" CXX="${{ env.CXX }}"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.repo_lower }}

      - name: Build and push Docker image (${{ matrix.platform }})
        uses: docker/build-push-action@v6
        id: push
        with:
          context: ./
          platforms: ${{ matrix.platform }}
          push: true
          file: certsquirt/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:latest
            ${{ env.REGISTRY }}/${{ env.repo_lower }}:${{ env.PLATFORM_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            PLATFORM=${{ matrix.platform }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.repo_lower }}:buildcache-${{ env.PLATFORM_TAG }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.repo_lower }}:latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.repo_lower }}:buildcache-${{ env.PLATFORM_TAG }},mode=max
          provenance: false
          sbom: false

      - name: Attest
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.repo_lower }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Debug image digest
        run: echo "Digest ${{ steps.push.outputs.digest }}"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: certsquirt-${{ env.PLATFORM_TAG }}
          path: certsquirt-${{ env.PLATFORM_TAG }}
    outputs:
      version: ${{ steps.get_version.outputs.version }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    if: github.ref == 'refs/heads/main'
    env:
      VERSION: ${{ needs.build.outputs.version }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout full repo for GH CLI
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move artifacts to root
        run: |
          mv ./artifacts/certsquirt-linux-amd64/certsquirt-linux-amd64 ./
          mv ./artifacts/certsquirt-linux-arm64/certsquirt-linux-arm64 ./

      - name: Upload release assets
        run: |
          export VERSION=`cat VERSION`
          gh release delete v$VERSION --cleanup-tag --yes || echo "No existing release to delete"
          gh release create v$VERSION \
            --title "Release v$VERSION" \
            --generate-notes \
            certsquirt-linux-amd64 \
            certsquirt-linux-arm64
